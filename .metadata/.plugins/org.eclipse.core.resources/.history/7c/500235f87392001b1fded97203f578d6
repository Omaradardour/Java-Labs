package customContainer;

import java.util.*;

class Container<E> {

	private Object[] array = new Object[0];

	void add(E object) {
		// **********************************************
		Object[] old = array;
		array = Arrays.copyOf(old, old.length + 1);
		// **********************************************
		// Use Arrays.copyOf() instead of the above code.
		// **********************************************
		array[old.length] = object;
	}

	@Override
	public String toString() {
		return Arrays.toString(array);
	}

	/**
	 * Returns the number of elements in this list.
	 *
	 * @return the number of elements in this list
	 */
	public int size() {
		// TODO: Add your implementation here.
		return array.length;
	}

	/**
	 * Removes all of the elements from this container. The container will be empty
	 * after this call returns.
	 */
	public void clear() {
		array = new Object[0];
	}

	/**
	 * Returns the element at the specified position in this container.
	 *
	 * @param index index of the element to return
	 * @return the element at the specified position in this container
	 */
	@SuppressWarnings("unchecked")
	public E get(int index) {
		// TODO: Add your implementation here.
		return (E) array[index];
	}

	/**
	 * Replaces the element at the specified position in this container with the
	 * specified element.
	 *
	 * @param index   index of the element to replace
	 * @param element element to be stored at the specified position
	 * @return the element previously at the specified position
	 */
	public E set(int index, E element) {
		@SuppressWarnings("unchecked")
		E old = (E) array[index];
		array[index] = element;
		return old;
	}

	/**
	 * Removes the element at the specified position in this container. Shifts any
	 * subsequent elements to the left (subtracts one from their indices).
	 *
	 * @param index the index of the element to be removed
	 * @return the element that was removed from the list
	 */
	public E remove(int index) {

		if (index < 0 || index >= this.array.length) {

			throw new IndexOutOfBoundsException(index);
		}
		@SuppressWarnings("unchecked")
		E removed = (E) this.array[index];
		Object[] temp = new Object[this.array.length - 1];
		System.arraycopy(array, 0, temp, 0, index);
		System.arraycopy(array, index + 1, temp, index, temp.length - index);
//		for (int i = 0, j = 0; i < this.array.length; i++) {
//			if (i != index) {
//				temp[j++] = this.array[i];
//			}

//		}
		this.array = temp;
		return removed;
	}

	/**
	 * Returns an array containing all of the elements in this container in proper
	 * sequence (from first to last element).
	 * <p>
	 * The returned array must be "safe", that is, this container cannot maintain
	 * any references to it. In other words, this method must allocate a new array.
	 * The caller is thus free to modify the returned array.
	 *
	 * @return an array containing all of the elements in this container in proper
	 *         sequence
	 */
	public Object[] toArray() {
		return Arrays.copyOf(array, array.length);

	}

//	// TODO: Add your implementation here.
	public static void main(String[] args) {
		Container<Student2> container = new Container<>();
		container.add(new Student2(1111));
		container.add(new Student2(2222));
		container.add(new Student2(3333));
		System.out.println(container);
		System.out.println(container.set(1, new Student2(4444)));
		System.out.println(container);
		System.out.println(container.remove(2));
		System.out.println(container);
		container.remove(0);
		System.out.println(container);
		System.out.println(Arrays.toString(container.toArray()));

	}

}
